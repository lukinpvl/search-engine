image: alpine:latest

stages:
  - test
  - stop_test
  - staging
  - production

test:
  stage: test
  script:
  - install_dependencies
  - ensure_namespace
  - deploy
  - sleep 60
  - if [ $(curl -s -o /dev/null -I -w "%{http_code}" http://test.se-project.tk/) != 200 ]; then exit 1; fi
  variables:
    KUBE_NAMESPACE: test
  environment:
    name: test
    url: http://test.se-project.tk
    on_stop: stop_test
  only:
    refs:
      - branches
    kubernetes: active


stop_test:
  stage: stop_test
  script:
  - install_dependencies
  - ensure_namespace
  - delete
  variables:
    KUBE_NAMESPACE: test
  environment:
    name: test
    action: stop
  when: manual
  allow_failure: false
  only:
    refs:
      - branches
    kubernetes: active


staging:
  stage: staging
  script:
  - install_dependencies
  - ensure_namespace
  - deploy
  variables:
    KUBE_NAMESPACE: staging
  environment:
    name: staging
    url: http://staging.se-project.tk
  only:
    refs:
      - master
    kubernetes: active


production:
  stage: production
  script:
    - install_dependencies
    - ensure_namespace
    - deploy
  variables:
    KUBE_NAMESPACE: production
  environment:
    name: production
    url: http://production.se-project.tk
  only:
    refs:
      - master
    kubernetes: active

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  export CI_REGISTRY="index.docker.io"
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY/$CI_PROJECT_PATH
  export CI_APPLICATION_TAG=$CI_COMMIT_REF_SLUG
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}

  function deploy() {
    echo $KUBE_NAMESPACE
    track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"
    helm dep build search-engine
    # for microservice in $(helm dep ls | grep "file://" | awk '{print $1}') ; do
    #   SET_VERSION="$SET_VERSION \ --set $microservice.image.tag='$(curl https://gitlab.se-project.tk/$CI_PROJECT_NAMESPACE/ui/raw/master/VERSION)' "
    helm upgrade --install \
      --wait \
      --set search-engine-ui.ingress.host="$KUBE_NAMESPACE.se-project.tk" \
      --set search-engine-ui.image.tag="$(curl https://gitlab.se-project.tk/$CI_PROJECT_NAMESPACE/search-engine-ui/raw/master/VERSION)" \
      --set search-engine-crawler.image.tag="$(curl https://gitlab.se-project.tk/$CI_PROJECT_NAMESPACE/search-engine-crawler/raw/master/VERSION)" \
      --namespace="$KUBE_NAMESPACE" \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      "$name" \
      search-engine
  }

  function install_dependencies() {

    apk add -U openssl curl tar gzip bash ca-certificates git
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.23-r3/glibc-2.23-r3.apk
    apk add glibc-2.23-r3.apk
    rm glibc-2.23-r3.apk

    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    chmod 700 get_helm.sh
    ./get_helm.sh
    helm version

    curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x /usr/bin/kubectl
    kubectl version --client
  }

  function ensure_namespace() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function delete() {
   # track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"
    helm delete "$name" -n "$KUBE_NAMESPACE"
   # || true
  }

before_script:
  - *auto_devops

